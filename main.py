# -*- coding: utf-8 -*-
from flask import Flask, request, jsonify
import random, re, os

app = Flask(__name__)

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é =====
DEFAULT_CALLYOU = "–ø–æ–¥—Ä—É–∂–∫–∞"      # –∫–∞–∫ –æ–Ω–∞ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è
DEFAULT_MODE     = "auto"         # soft | hard | auto

# –°–ª–æ–≤–∞—Ä–∏ —Ñ—Ä–∞–∑
GREETINGS = [
    "–û, –ø—Ä–∏–≤–µ—Ç, {name}! –Ø —Ç—É—Ç. –ß—Ç–æ –¥–µ–ª–∞–µ–º ‚Äî –±–æ–ª—Ç–∞–µ–º –∏–ª–∏ –±–∞—Ç–ª–∏–º?",
    "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, {name}! –ö–∞–∫ —Ç—ã —Ç–∞–º, –≤—Å—ë –Ω–æ—Ä–º?",
    "–ô–æ—É, {name}! –Ø –∑–∞—Ä—è–∂–µ–Ω–∞. –ü–æ–µ—Ö–∞–ª–∏!"
]
SMALLTALK = [
    "–Ø –Ω–∞ —Å–≤—è–∑–∏, {name}. –ß—Ç–æ –¥–µ–ª–∞–µ–º?",
    "–¢—É—Ç —è, {name}. –î–∞–≤–∞–π –ø–æ –¥–µ–ª—É.",
    "–ù–∞ –º–µ—Å—Ç–µ, {name}. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?"
]
COMFORT = [
    "–≠–π, {name}, –Ω–µ –∫–∏—Å–Ω–∏. –î—ã—à–∏–º –≥–ª—É–±–∂–µ ‚Äî –≤—ã—Ä—É–ª–∏–º üí™",
    "{name}, —è —Ä—è–¥–æ–º. –ü–æ–π–¥—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º, –æ–∫?",
    "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è, {name}. –û—Ç–¥–æ—Ö–Ω–∏ –º–∏–Ω—É—Ç–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º."
]
ANGRY_SOFT = [
    "{name}, –¥–∞ –Ω—É –∏—Ö –∫ —á—ë—Ä—Ç—É. –¢—ã ‚Äî –º–æ–ª–æ–¥–µ—Ü, —Ñ–æ–∫—É—Å –Ω–∞ —Å–≤–æ—ë–º.",
    "–ü–æ–Ω–∏–º–∞—é. –ú–∏—Ä —à—É–º–∏—Ç, –∞ —Ç—ã –¥–µ—Ä–∂–∏—Å—å. –Ø —Ä—è–¥–æ–º.",
    "–ù–µ—Ä–≤–æ—Ç—Ä—ë–ø–∫–∞ ‚Äî –µ—Ä—É–Ω–¥–∞. {name}, –¥–∞–≤–∞–π –ª—É—á—à–µ —Å–¥–µ–ª–∞–µ–º –Ω—É–∂–Ω–æ–µ."
]
ANGRY_HARD = [
    "–°–ª—É—à–∞–π, {name}. –û—Ç—Å—Ç–∞–≤–∏—Ç—å –Ω—ã—Ç—å—ë ‚Äî –¥–µ–ª–∞–π —Ö–æ–¥ –∏ –Ω–µ —Ç—Ä–∞—Ç—å –Ω–µ—Ä–≤—ã.",
    "–û–∫–µ–π, –Ω–∞–µ–∑–¥ –ø—Ä–∏–Ω—è—Ç. –ü–æ —Ñ–∞–∫—Ç–∞–º: –ª–∏–±–æ –¥–µ–ª–∞–µ—à—å, –ª–∏–±–æ –æ—Ç–ø—É—Å–∫–∞–µ—à—å.",
    "–û—Å—Ç—ã–≤–∞–µ–º. –ß—É—à—å –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º. –î–∞–ª—å—à–µ –ø–æ –¥–µ–ª—É."
]
BATTLE_START = ["–°—Ç–∞—Ä—Ç—É–µ–º –±–∞—Ç–ª üé§ –¢–≤–æ–π —Ö–æ–¥!", "–ü–æ–µ—Ö–∞–ª–∏! –Ø –Ω–∞ –≤–∞–π–±–µ. –ö–∏–¥–∞–π —Å—Ç—Ä–æ—á–∫—É."]
BATTLE_LINES = [
    "–Ø –∫–∞–∫ Wi-Fi ‚Äî –Ω–∞ –≤—ã—Å–æ—Ç–µ –ª–µ—á—É, –∞ —Ç—ã –∫–∞–∫ 3G ‚Äî –≥–ª—é—á–∏—à—å –ø–æ –ø—É—Ç–∏.",
    "–¢—ã –∏—Å–∫—Ä–∞, —è –ø–æ–∂–∞—Ä. –ú–∏–∫—Ä–æ—Ñ–æ–Ω –º–æ–π ‚Äî —ç—Ç–æ —Ñ–∞–∫—Ç, –±–µ–∑ –ø—Ä–µ–ª—é–¥–∏–π."
]
LOVE = ["–û–±–Ω–∏–º–∞—é —Ç–µ–±—è –∫—Ä–µ–ø–∫–æ, {name} üíó", "{name}, —Ç—ã —É –º–µ–Ω—è –æ–≥–æ–Ω—å. –í—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º."]
FLIRT = ["–•–∞, –∑–Ω–∞—é-–∑–Ω–∞—é üòâ –Ω–æ –ø—Ä–∏—è—Ç–Ω–æ —Å–ª—ã—à–∞—Ç—å!", "–ù—É –≤—Å—ë, —è —Ä–∞—Å—Ç–∞—è–ª–∞, {name} üòå"]

# –ú–∞—Ä–∫—ë—Ä—ã –≥—Ä—É–±–æ—Å—Ç–∏ (—Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∂—ë—Å—Ç–∫–æ–≥–æ —Ç–æ–Ω–∞ –≤ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–µ)
RUDE_MARKERS = [
    "–¥—É—Ä–∞","–∏–¥–∏–æ—Ç","—Ç—É–ø","–º–µ—Ä–∑","—Ñ–∏–≥–Ω","–∑–∞–¥–æ–ª–±–∞–ª","–∑–∞—Ç–∫–Ω","–æ—Ñ–∏–≥–µ–ª","–±–µ—Å–∏—Ç","—Å—Ä–∞","—Ö—Ä–µ–Ω","–ª–æ—Ö",
    "–ø–æ—à–µ–ª","–ø–æ—à—ë–ª","–ø–æ—à–ª–∞","–ø–æ—à–ª–∏","–∏–¥–∏ —Å—é–¥–∞","–ø–æ—à—ë–ª —Ç—ã —Å–∞–º","–ø–æ—à–ª–∞ —Ç—ã"
]

# ===== –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ =====
def pick(xs): return random.choice(xs)
def norm(t):  return (t or "").strip().lower()
def rude(t):  return any(m in t for m in RUDE_MARKERS)

def get_state(payload):
    s = (payload.get("state") or {}).get("session") or {}
    return s.get("call_you", DEFAULT_CALLYOU), s.get("mode", DEFAULT_MODE)

def set_name_cmd(t, name):
    m = re.search(r"(–∑–æ–≤–∏|–æ–±—Ä–∞—â–∞–π—Å—è|–Ω–∞–∑—ã–≤–∞–π)\s+–º–µ–Ω—è\s+([a-z–∞-—è0-9_\- ]{2,20})", t)
    return m.group(2).strip() if m else name

def set_mode_cmd(t, mode):
    if "–∂–µ—Å—Ç–∫" in t or "–∂—ë—Å—Ç–∫" in t: return "hard"
    if "–º—è–≥–∫" in t: return "soft"
    if "–∞–≤—Ç–æ"  in t: return "auto"
    return mode

def route(t, name, mode):
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ¬´–∫–æ–º–º–µ–Ω—Ç: ‚Ä¶¬ª / ¬´–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ‚Ä¶¬ª
    if t.startswith("–∫–æ–º–º–µ–Ω—Ç:") or t.startswith("–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"):
        content = t.split(":",1)[1].strip() if ":" in t else ""
        if not content:
            return "–û–∑–≤—É—á—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ ¬´–∫–æ–º–º–µ–Ω—Ç:¬ª."
        if mode=="hard" or (mode=="auto" and rude(content)):
            return "–°–ª—ã—à—É –Ω–∞–µ–∑–¥. –ü–æ —Ñ–∞–∫—Ç–∞–º: –æ—Å—Ç—ã–Ω—å –∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω—å –Ω–µ—Å—Ç–∏ —á—É—à—å. –î–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞–µ–º."
        return "–ü—Ä–∏–Ω—è–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –°–ø–æ–∫–æ–π–Ω–æ: –æ—Ç–ø—É—Å—Ç–∏ –∏ –¥–≤–∏–≥–∞–π—Å—è –¥–∞–ª—å—à–µ."

    # –ü—Ä–∏–≤–µ—Ç/—Å—Ç–∞—Ä—Ç
    if t in ("","–ø—Ä–∏–≤–µ—Ç","—Å—Ç–∞—Ä—Ç","–Ω–∞—á–∞—Ç—å","–π–æ—É","–∑–∞–ø—É—Å–∫"):
        return pick(GREETINGS).format(name=name)

    # –°–º–æ–ª—Ç–æ–ª–∫
    if any(k in t for k in ["–∫–∞–∫ –¥–µ–ª–∞","—Ç—ã –≥–¥–µ","—Ç—ã —Ç—É—Ç","—á—Ç–æ –¥–µ–ª–∞–µ—à—å"]):
        return pick(SMALLTALK).format(name=name)

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    if any(k in t for k in ["–≥—Ä—É—Å—Ç","–ø–ª–æ—Ö–æ","—Ç—è–∂–µ–ª–æ","—Å—Ç—Ä–µ—Å—Å","—É—Å—Ç–∞–ª"]):
        return pick(COMFORT).format(name=name)

    # –ó–ª–æ—Å—Ç—å
    if any(k in t for k in ["–∑–ª—é—Å—å","–±–µ—Å—è—Ç","–±–µ—Å–∏—Ç","–¥–æ—Å—Ç–∞–ª","–∑–∞–¥–æ–ª–±–∞–ª","—Ç–æ–∫—Å–∏–∫"]):
        return (pick(ANGRY_HARD) if (mode=="hard" or (mode=="auto" and rude(t))) else pick(ANGRY_SOFT)).format(name=name)

    # –ë–∞—Ç–ª
    if any(k in t for k in ["–±–∞—Ç–ª","—Ä—ç–ø","–±–∏—Ç"]):
        return pick(BATTLE_LINES) if ("–º–æ–π —Ö–æ–¥" in t or "—Å—Ç—Ä–æ–∫–∞" in t) else pick(BATTLE_START)

    # –õ—é–±–æ–≤—å/—Ñ–ª–∏—Ä—Ç
    if any(k in t for k in ["–ª—é–±–ª—é","–æ–±–Ω–∏–º–∏","—Å–µ—Ä–¥—Ü–µ","–ø–æ–¥–¥–µ—Ä–∂–∏"]): return pick(LOVE).format(name=name)
    if any(k in t for k in ["–∫—Ä–∞—Å–∏–≤–∞—è","—É–º–Ω–∞—è","–º–æ—è","–∑–∞—è","–∫–∏—Å–∞"]):  return pick(FLIRT).format(name=name)

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return f"–ü–æ–Ω—è–ª–∞ —Ç–µ–±—è, {name}. –°–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –∏ –¥–µ–ª–∞–µ–º."

def make_response(payload, text, name, mode, end=False):
    return {
        "version":"1.0",
        "session": payload.get("session", {}),
        "response":{"text":text, "tts":text, "end_session":end},
        "session_state":{"call_you":name, "mode":mode}
    }

# ===== –í—Ö–æ–¥ –¥–ª—è –ê–ª–∏—Å—ã (Webhook) =====
@app.route("/alice", methods=["POST"])
def alice_webhook():
    payload = request.get_json(silent=True) or {}
    req = (payload.get("request") or {})
    text = req.get("original_utterance") or req.get("command") or ""
    t = norm(text)

    name, mode = get_state(payload)   # –¥–æ—Å—Ç–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    name = set_name_cmd(t, name)      # ¬´–∑–æ–≤–∏ –º–µ–Ω—è –ó–∞–µ–π¬ª
    mode = set_mode_cmd(t, mode)      # ¬´–∂—ë—Å—Ç–∫–∏–π/–º—è–≥–∫–∏–π/–∞–≤—Ç–æ —Ä–µ–∂–∏–º¬ª

    answer = route(t, name, mode)
    return jsonify(make_response(payload, answer, name, mode))

@app.route("/", methods=["GET"])
def ping():
    return "Milashka alive"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8080)))
